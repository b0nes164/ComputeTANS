#pragma use_dxc
#pragma shader_feature WAVE_SIZE_16 WAVE_SIZE_32 WAVE_SIZE_64
#pragma kernel GetWaveSize
#pragma kernel Init
#pragma kernel ParMerge
#pragma kernel ParMergeB
#pragma kernel MergeB
#pragma kernel ParC
#pragma kernel MergeC
#pragma kernel CodeWordLengths

#define WAVE_SIZE 32
#define NUM_BLOCKS 64

//the size, in bytes, of a an element to be merged
#define MERGE_VAR_SIZE 4
//the max size, in bytes, of the groupshared memory cache
#define GROUPSHARED_MAX_MEMORY 32768

#ifdef WAVE_SIZE_16
#define WAVE_SIZE 16
#endif

#ifdef WAVE_SIZE_32
#define WAVE_SIZE 32
#endif

#ifdef WAVE_SIZE_64
#define WAVE_SIZE 64
#endif


struct sorting_network_column
{
    uint first_element_index;
    uint group_stride;
    uint group_count;
    uint row_stride;
    uint row_count;
    uint comparisons_per_row;
    uint left_factor;
    uint right_offset;
};

struct node
{
    uint freq;
    int leader;
};

struct copyNode
{
    uint freq;
    uint isLeaf;
    uint index;
};

//we only care about the instance count
struct arguments
{
    uint indexCountPerInstance;
    uint instanceCount;
    uint startIndexLocation;
    uint baseVertexLocation;
    uint startInstanceLocation;
};

RWStructuredBuffer<uint> b_waveSize;

extern float e_seed;
extern uint e_arraySize;
extern uint e_dictSize;

RWStructuredBuffer<arguments> b_mergeArgs;
//index 0 is a
//index 1 is b
RWStructuredBuffer<uint> b_mergeLengths;

// 0 - count of symbols
// 1 - count of used symbols
// 2 - L
RWStructuredBuffer<uint> SymbolCount;

RWStructuredBuffer<uint> TempBuffer;
RWStructuredBuffer<uint> OriginalBuffer;
RWStructuredBuffer<uint> FreqBuffer;

//leaf nodes - number of symbols
RWStructuredBuffer<node> lNodesBuffer;
//internal Node Queue
RWStructuredBuffer<node> iNodesBuffer;
//CodeWord Lengths
RWStructuredBuffer<uint> CLBuffer;
//Copy
RWStructuredBuffer<copyNode> copyBuffer;
//Flags
RWStructuredBuffer<uint> flagBuffer;
//Temp
RWStructuredBuffer<uint> tempBuffer;

extern uint dispatchGroups;
extern uint lengthA;
extern uint lengthB;
extern uint mergeLength;

RWStructuredBuffer<uint> mergeA;
RWStructuredBuffer<uint> mergeB;
RWStructuredBuffer<uint> groupA;
RWStructuredBuffer<uint> groupB;
RWStructuredBuffer<uint> mergeOut;
groupshared int g_mergeA[WAVE_SIZE];
groupshared int g_mergeB[WAVE_SIZE];
groupshared int g_intA[2];
groupshared int g_intB[2];
int startLastA;
int startLastB;

groupshared int offsetA;
groupshared int offsetB;


RWStructuredBuffer<uint> b_offsetCounter;
RWStructuredBuffer<int> t_offsetCounter;


groupshared uint blockA[2048];
groupshared uint blockB[2048];

static uint s_numthreads = 256;
static uint s_thirtyTwo = 32;

extern int sizeA;
extern int sizeB;

RWStructuredBuffer<int> t_mergeA;
RWStructuredBuffer<int> t_mergeB;
RWStructuredBuffer<int> t_groupA;
RWStructuredBuffer<int> t_groupB;

RWStructuredBuffer<int> t_mergeOut;

groupshared int t_g_mergeA[1024];
groupshared int t_g_mergeB[1024];


static int s_blocks = 64;


//random
uint rand(uint s, uint seed, uint limit)
{
    s += seed;
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return uint((double(s) / 0x7FFFFFFF) * limit);
}

uint randTwo(float n, uint limit)
{
    return uint(frac(sin(n) * 43758.5453) * limit);
}

//**************************************************************
// HLSL Odd Even Merge Sort
// Written by Sergey Stepanov https://github.com/ref2401
// Used under MIT Liscence
// Added 9/16/2021
//**************************************************************

void compare_and_swap(uint l, uint r, RWStructuredBuffer<copyNode> _inBuffer)
{
    const copyNode x = _inBuffer[l];
    const copyNode y = _inBuffer[r];
    
    if (x.freq < y.freq)
    {
        return;
    }
    else
    {
        _inBuffer[l] = y;
        _inBuffer[r] = x;
    }
}

void process_column(uint curr_thread_id, sorting_network_column column, RWStructuredBuffer<copyNode> inBuffer)
{
    const uint comparisons_per_group = column.row_count * column.comparisons_per_row;
    const uint comparison_count = column.group_count * comparisons_per_group;
    const uint comparisons_per_thread = max(1, comparison_count / s_numthreads);
    const uint required_thread_count = uint(ceil(float(comparison_count) / comparisons_per_thread));
    
    if (curr_thread_id >= required_thread_count)
    {
        return;
    }
    
    const uint remained_comparison_count = comparison_count - comparisons_per_thread * s_numthreads;
    const uint cmpt_first_index = curr_thread_id * comparisons_per_thread;
    const uint cmpt_count = comparisons_per_thread + ((curr_thread_id + 1) / s_numthreads) * remained_comparison_count;
    
    for (uint i = 0; i < cmpt_count; i++)
    {
        const uint ci = cmpt_first_index + i;
        const uint gi = ci / comparisons_per_group;
        const uint ri = (ci % comparisons_per_group) / column.comparisons_per_row;
        const uint start_index = column.first_element_index
            + gi * column.group_stride
            + ri * column.row_stride;

        const uint l = start_index + column.left_factor * (ci % column.comparisons_per_row);
        const uint r = l + column.right_offset;
        compare_and_swap(l, r, inBuffer);
    }
}

void process_first_column(uint curr_thread_id, uint item_count, uint v_2power, RWStructuredBuffer<copyNode> inBuffer)
{
    const sorting_network_column column =
    {
		/* first_element_index */   0,
		/* uint group_stride */		0,
		/* uint group_count */		1,
		/* row_stride */			v_2power,
		/* row_count */				item_count / v_2power,
		/* comparisons_per_row */	v_2power >> 1,
		/* left_factor */			1,
		/* right_offset */			v_2power >> 1
    };
    
    process_column(curr_thread_id, column, inBuffer);
    DeviceMemoryBarrierWithGroupSync();
}

void process_intermediate_columns(uint curr_thread_id, uint item_count, uint v_2power, uint column_count, RWStructuredBuffer<copyNode> inBuffer)
{
    sorting_network_column column =
    {
		/* first_element_index */   v_2power >> 2,
		/* uint group_stride */		v_2power,
		/* uint group_count */		item_count / v_2power,
		/* row_stride */			v_2power >> 1,
		/* row_count */				1,
		/* comparisons_per_row */	v_2power >> 2,
		/* left_factor */			1,
		/* right_offset */			v_2power >> 2
    };
    
    for (uint ci = 0; ci < column_count; ++ci)
    {
        process_column(curr_thread_id, column, inBuffer);
        DeviceMemoryBarrierWithGroupSync();

        column.first_element_index >>= 1;
        column.row_stride >>= 1;
        column.row_count = 2 * column.row_count + 1;
        column.comparisons_per_row >>= 1;
        column.right_offset >>= 1;
    }
}

void process_last_column(uint curr_thread_id, uint item_count, uint v_2power, RWStructuredBuffer<copyNode> inBuffer)
{
    const sorting_network_column column =
    {
        /* first_element_index */   1,
		/* uint group_stride */		0,
		/* uint group_count */		1,
		/* row_stride */			v_2power,
		/* row_count */				item_count / v_2power,
		/* comparisons_per_row */	(v_2power >> 1) - 1,
		/* left_factor */			2,
		/* right_offset */			1
    };

    process_column(curr_thread_id, column, inBuffer);
    DeviceMemoryBarrierWithGroupSync();
}

void sort_4(uint curr_thread_id, uint item_count, RWStructuredBuffer<copyNode> inBuffer)
{
    const uint tuple_count = item_count >> 2;
    if (curr_thread_id >= tuple_count)
    {
        return;
    }
    
    const uint tuples_per_thread = max(1, tuple_count / s_numthreads);
    const uint origin = 4 * curr_thread_id * tuples_per_thread;
    
    for (uint t = 0; t < tuples_per_thread; ++t)
    {
        const uint idx0 = origin + 4 * t;
        const uint idx1 = idx0 + 1;
        const uint idx2 = idx1 + 1;
        const uint idx3 = idx2 + 1;

		// compare and swap: (0, 1) (2, 3) (0, 2) (1, 3) (1, 2) ---
        compare_and_swap(idx0, idx1, inBuffer);
        compare_and_swap(idx2, idx3, inBuffer);
        compare_and_swap(idx0, idx2, inBuffer);
        compare_and_swap(idx1, idx3, inBuffer);
        compare_and_swap(idx1, idx2, inBuffer);
    }
}

void SortMain(uint3 _gtid, RWStructuredBuffer<copyNode> inBuffer, uint sortSize)
{
    sort_4(_gtid.x, sortSize, inBuffer);
    DeviceMemoryBarrierWithGroupSync();
    
    uint power = 3;
    uint v_2power = 8;
    
    while (v_2power <= sortSize)
    {
        process_first_column(_gtid.x, sortSize, v_2power, inBuffer);
        process_intermediate_columns(_gtid.x, sortSize, v_2power, power - 2, inBuffer);
        process_last_column(_gtid.x, sortSize, v_2power, inBuffer);
        
        ++power;
        v_2power <<= 1;
    }
}

//helper
uint getCur()
{
    return flagBuffer[0];
}
void setCur(uint val)
{
    flagBuffer[0] = val;
}
uint getFront()
{
    return flagBuffer[1];
}
void setFront(uint val)
{
    flagBuffer[1] = val;
}
uint getRear()
{
    return flagBuffer[2];
}
void setRear(uint val)
{
    flagBuffer[2] = val;
}
uint getMinFreq()
{
    return flagBuffer[3];
}
void setMinFreq(uint val)
{
    flagBuffer[3] = val;
}
uint getMergeFront()
{
    return flagBuffer[4];
}
void setMergeFront(uint val)
{
    flagBuffer[4] = 0;
}
uint getMergeRear()
{
    return flagBuffer[5];
}
void setMergeRear(uint val)
{
    flagBuffer[5] = val;
}
uint getCurLeaveNum()
{
    return flagBuffer[6];
}
void setCurLeaveNum(uint val)
{
    flagBuffer[6] = val;
}
uint getTempLength()
{
    return flagBuffer[7];
}
void setTempLength(uint val)
{
    flagBuffer[7] = val;
}


[numthreads(1, 1, 1)]
void GetWaveSize(int3 id : SV_DispatchThreadID)
{
    b_waveSize[0] = WaveGetLaneCount();
}

[numthreads(256, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    uint threadWorkOne = ceil(e_dictSize * 1.0f / s_numthreads);
    uint threadWorkTwo = ceil(e_arraySize * 1.0f / s_numthreads);
    
    if (id.x == 1)
    {
        SymbolCount[0] = 0;
        SymbolCount[1] = 0;
        SymbolCount[2] = 0;
    }
    
    //first init
    uint tempOne = id.x * threadWorkOne;
    for (uint i = tempOne; i < (tempOne + threadWorkOne); i++)
    {
        if (i < e_dictSize)
        {
            //TempBuffer[i] = rand(i, e_seed, e_arraySize);
            TempBuffer[i] = randTwo(i + e_seed, e_arraySize);
            
            //just make sure 0 isnt a symbol
            int fixer = 13;
            while (TempBuffer[i] == 0)
            {
                TempBuffer[i] = randTwo(fixer, e_arraySize);
                fixer++;
            }

        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    //second init
    
    uint tempTwo = id.x * threadWorkTwo;
    
    for (uint j = tempTwo; j < (tempTwo + threadWorkTwo); j++)
    {
        if (j < e_arraySize)
        {
            OriginalBuffer[j] = TempBuffer[randTwo(j + e_seed, e_dictSize)];
            FreqBuffer[j] = 0;
        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    //count the frequency
    
    for (uint k = tempTwo; k < (tempTwo + threadWorkTwo); k++)
    {
        if (k < e_arraySize)
        {
            InterlockedAdd(FreqBuffer[OriginalBuffer[k]], 1);
        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    //count the number of symbols
    
    for (uint l = tempTwo; l < (tempTwo + threadWorkTwo); l++)
    {
        if (l < e_arraySize)
        {
            if (FreqBuffer[l] != 0)
            {
                InterlockedAdd(SymbolCount[0], 1);
            }
        }
    }
}

[numthreads(32, 1, 1)]
void ParMerge(uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID)
{   
    uint index = (id.x * (lengthA + lengthB)) / s_thirtyTwo;
    uint aTop = index > lengthA ? lengthA : index;
    uint bTop = index > lengthB ? index - lengthA : 0;
    uint aBot = bTop;
    
    while (true)
    {
        uint offset = (aTop - aBot) / 2;
        uint aI = aTop - offset;
        uint bI = bTop + offset;
        if (mergeA[aI] > mergeB[bI - 1])
        {
            if (mergeA[aI - 1] <= mergeB[bI])
            {
                blockA[id.x] = aI;
                blockB[id.x] = bI;
                break;
            }
            else
            {
                aTop = aI - 1;
                bTop = bI + 1;
            }
        }
        else
        {
            aBot = aI + 1;
        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    groupA[id.x] = blockA[id.x];
    groupB[id.x] = blockB[id.x];
}

[numthreads(16, 1, 1)]
void ParMergeB(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID, int3 id : SV_DispatchThreadID)
{
    //rename to wave size
    int index = (sizeA + sizeB) / s_blocks * (gid.x + 1);
    
    if(gid.x == s_blocks - 1)
    {
        return;
    }
    
    int a[2];
    int b[2];
    
    int x = 0;
    int y = 1;
    
    if (index > sizeA)
    {
        a[x] = index - sizeA;
        a[y] = sizeA;
        b[x] = sizeA;
        b[y] = index - sizeA;
    }
    else
    {
        a[x] = 0;
        a[y] = index;
        b[x] = index;
        b[y] = 0;
    }
    
    uint counter = 0;
    
    while (true)
    {
        int offset = abs(a[y] - b[y]) / 2;
        int c[2] = { a[x] + offset, a[y] - offset };
        t_offsetCounter[counter + (gid.x * 10)] = offset;
        
        if (c[y] >= 0 && c[x] <= sizeB && (t_mergeA[c[y]] > t_mergeB[c[x] - 1] || c[y] == sizeA || c[x] == 0))
        {
            if (c[x] == sizeB || c[y] == 0 || t_mergeA[c[y] - 1] <= t_mergeB[c[x]])
            {
                t_groupA[gid.x] = c[y];
                t_groupB[gid.x] = c[x];
                break;
            }
            else
            {
                a[x] = c[x] + 1;
                a[y] = c[y] - 1;
            }
        }
        else
        {
            b[x] = c[x] - 1;
            b[y] = c[y] + 1;
        }
        counter++;
    }

    /*
    int waveSize = 16;
    //rename to wave size
    int index = (sizeA + sizeB) / waveSize * (id.x + 1);
    
    if (id.x * waveSize >= sizeA + sizeB)
    {
        return;
    }
    
    int a[2];
    int b[2];
    
    int x = 0;
    int y = 1;
    
    if (index > sizeA)
    {
        a[x] = index - sizeA;
        a[y] = sizeA;
        b[x] = sizeA;
        b[y] = index - sizeA;
    }
    else
    {
        a[x] = 0;
        a[y] = index;
        b[x] = index;
        b[y] = 0;
    }
    
    while (true)
    {
        int offset = abs(a[y] - b[y]) / 2;
        int c[2] = { a[x] + offset, a[y] - offset };
        
        if (c[y] >= 0 && c[x] <= sizeB && (t_mergeA[c[y]] > t_mergeB[c[x] - 1] || c[y] == sizeA || c[x] == 0))
        {
            if (c[x] == sizeB || c[y] == 0 || t_mergeA[c[y] - 1] <= t_mergeB[c[x]])
            {
                t_groupA[id.x] = c[y];
                t_groupB[id.x] = c[x];
                break;
            }
            else
            {
                a[x] = c[x] + 1;
                a[y] = c[y] - 1;
            }
        }
        else
        {
            b[x] = c[x] - 1;
            b[y] = c[y] + 1;
        }
    }
    */
}

[numthreads(32, 1, 1)]
void MergeB(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID)
{
    int startA, endA, startB, endB;
    int x = 0;
    int y = 1;
    
    if (gid.x == 0)
    {
        startA = 0;
        endA = t_groupA[gid.x];
        startB = 0;
        endB = t_groupB[gid.x];
    }
    else
    {
        if (gid.x == s_blocks - 1)
        {
            startA = t_groupA[gid.x - 1];
            endA = sizeA;
            startB = t_groupB[gid.x - 1];
            endB = sizeB;
        }
        else
        {
            startA = t_groupA[gid.x - 1];
            endA = t_groupA[gid.x];
            startB = t_groupB[gid.x - 1];
            endB = t_groupB[gid.x];
        }
    }
    
    int iter_max = (s_thirtyTwo - 1 + (endB - startB) + (endA - startA)) / s_thirtyTwo;
    int iter = 0;
    
    offsetA = 0;
    offsetB = 0;
    
    do
    {
        GroupMemoryBarrierWithGroupSync();
        
        if (startA + offsetA + gtid.x < endA)
        {
            t_g_mergeA[gtid.x] = t_mergeA[startA + offsetA + gtid.x];
        }
        if (startB + offsetB + gtid.x < endB)
        {
            t_g_mergeB[gtid.x] = t_mergeB[startB + offsetB + gtid.x];
        }

        GroupMemoryBarrierWithGroupSync();
        
        int sizeAshared = endA - startA - offsetA;
        int sizeBshared = endB - startB - offsetB;
        if (sizeAshared < 0) sizeAshared = 0;
        if (sizeAshared > s_thirtyTwo && sizeAshared != 0) sizeAshared = s_thirtyTwo;
        if (sizeBshared < 0) sizeBshared = 0;
        if (sizeBshared > s_thirtyTwo && sizeBshared != 0) sizeBshared = s_thirtyTwo;
        
        int i = gtid.x;
        
        if (i < sizeAshared + sizeBshared)
        {
            int a[2];
            int b[2];
            
            if(i > sizeAshared)
            {
                a[x] = i - sizeAshared;
                a[y] = sizeAshared;
                b[x] = sizeAshared;
                b[y] = i - sizeAshared;
            }
            else
            {
                a[x] = 0;
                a[y] = i;
                b[x] = i;
                b[y] = 0;  
            }
            
            while(true)
            {
                int offsetMain = abs(a[y] - b[y]) / 2;
                int c[2] = { a[x] + offsetMain, a[y] - offsetMain };
                
                if (c[y] >= 0 && c[x] <= sizeBshared && (t_g_mergeA[c[y]] > t_g_mergeB[c[x] - 1] || c[y] == sizeAshared || c[x] == 0))
                {
                    if (c[x] == sizeBshared || c[y] == 0 || t_g_mergeA[c[y] - 1] <= t_g_mergeB[c[x]])
                    {
                        int idx = startA + startB + i + iter * s_thirtyTwo;
                        if (c[y] < sizeAshared && (c[x] == sizeBshared || t_g_mergeA[c[y]] <= t_g_mergeB[c[x]]))
                        {
                            t_mergeOut[idx] = t_g_mergeA[c[y]];
                            InterlockedAdd(offsetA, 1);
                        }
                        else
                        {
                            t_mergeOut[idx] = t_g_mergeB[c[x]];
                            InterlockedAdd(offsetB, 1);
                        }
                        break;
                    }
                    else
                    {
                        a[x] = c[x] + 1;
                        a[y] = c[y] - 1;
                    }
                }
                else
                {
                    b[x] = c[x] - 1;
                    b[y] = c[y] + 1;
                }
            }
        }
        iter = iter + 1;
    } while (iter < iter_max);

}

[numthreads(WAVE_SIZE, 1, 1)]
void ParC(uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    //uint mergeLengthA = b_mergeLengths[0];
    //uint mergeLengthB = b_mergeLengths[1];
    int mergeLengthA = (int)lengthA;
    int mergeLengthB = (int)lengthB;
    int index, aTop, aBot, bTop, bBot, offset, aI, bI;
    
    if(gtid.x < 2)
    {
        if(gid.x != NUM_BLOCKS - 1)
        {
            index = (gid.x + 1 - gtid.x) * (mergeLengthA + mergeLengthB) / NUM_BLOCKS;
        }
        else
        {
            index = (NUM_BLOCKS - (gtid.x + 1)) * (mergeLengthA + mergeLengthB) / NUM_BLOCKS;
        }
        if (index > mergeLengthA)
        {
            aTop = mergeLengthA;
            aBot = index - mergeLengthA;
            bTop = mergeLengthA;
            bBot = index - mergeLengthA;
        }
        else
        {
            aTop = index;
            aBot = 0;
            bTop = index;
            bBot = 0;
        }
        while (true)
        {
            offset = abs(aTop - aBot) / 2;
            aI = aTop - offset;
            bI = bBot + offset;
        
            if (aI >= 0 && bI <= mergeLengthB && (mergeA[aI] > mergeB[bI - 1] || aI == mergeLengthA || bI == 0))
            {
                if (bI == mergeLengthB || aI == 0 || mergeA[aI - 1] <= mergeB[bI])
                {
                    groupA[gid.x * 2 + gtid.x] = aI;
                    groupB[gid.x * 2 + gtid.x] = bI;
                    g_intA[gtid.x] = aI;
                    g_intB[gtid.x] = bI;
                    break;
                }
                else
                {
                    bBot = bI + 1;
                    aTop = aI - 1;
                }
            }
            else
            {
                bTop = bI - 1;
                aBot = aI + 1;
            }
        }
    }
    
    GroupMemoryBarrierWithGroupSync();
    int startA, endA, startB, endB;
    if (gid.x == 0)
    {
        startA = 0;
        endA = g_intA[0];
        startB = 0;
        endB = g_intB[0];
    }
    else
    {
        if (gid.x == NUM_BLOCKS - 1)
        {
            startA = g_intA[0];
            endA = mergeLengthA;
            startB = g_intB[0];
            endB = mergeLengthB;
        }
        else
        {
            startA = g_intA[1];
            endA = g_intA[0];
            startB = g_intB[1];
            endB = g_intB[0];
        }
    }
    
    int iter_max = (WAVE_SIZE - 1 + (endB - startB) + (endA - startA)) / WAVE_SIZE;
    int iter = 0;
    offsetA = 0;
    offsetB = 0;
    do
    {
        GroupMemoryBarrierWithGroupSync();
        if (startA + offsetA + gtid.x < endA)
        {
            g_mergeA[gtid.x] = mergeA[startA + offsetA + gtid.x];
        }
        if (startB + offsetB + gtid.x < endB)
        {
            g_mergeB[gtid.x] = mergeB[startB + offsetB + gtid.x];
        }
        
        GroupMemoryBarrierWithGroupSync();   
        int sizeAshared = endA - startA - offsetA;
        int sizeBshared = endB - startB - offsetB;
        if (sizeAshared < 0) sizeAshared = 0;
        if (sizeAshared > WAVE_SIZE && sizeAshared != 0) sizeAshared = WAVE_SIZE;
        if (sizeBshared < 0) sizeBshared = 0;
        if (sizeBshared > WAVE_SIZE && sizeBshared != 0) sizeBshared = WAVE_SIZE;
        
        if (gtid.x < sizeAshared + sizeBshared)
        {
            if(gtid.x > sizeAshared)
            {
                aTop = sizeAshared;
                aBot = gtid.x - sizeAshared;
                bTop = sizeAshared;
                bBot = gtid.x - sizeAshared;
            }
            else
            {
                aTop = gtid.x;
                aBot = 0;
                bTop = gtid.x;
                bBot = 0;
            }
            
            while (true)
            {
                offset = abs(aTop - aBot) / 2;
                aI = aTop - offset;
                bI = bBot + offset;
        
                if (aI >= 0 && bI <= sizeBshared && (g_mergeA[aI] > g_mergeB[bI - 1] || aI == sizeAshared || bI == 0))
                {
                    if (bI == sizeBshared || aI == 0 || g_mergeA[aI - 1] <= g_mergeB[bI])
                    {
                        if (aI < sizeAshared && (bI == sizeBshared || g_mergeA[aI] <= g_mergeB[bI]))
                        {
                            mergeOut[startA + startB + gtid.x + iter * WAVE_SIZE] = g_mergeA[aI];
                            InterlockedAdd(offsetA, 1);
                        }
                        else
                        {
                            mergeOut[startA + startB + gtid.x + iter * WAVE_SIZE] = g_mergeB[bI];
                            InterlockedAdd(offsetB, 1);
                        }
                        break;
                    }
                    else
                    {
                        bBot = bI + 1;
                        aTop = aI - 1;
                    }
                }
                else
                {
                    bTop = bI - 1;
                    aBot = aI + 1;
                }
            }
        }
        iter++;
    } while (iter < iter_max);
}

[numthreads(32, 1, 1)]
void MergeC(uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    
}

[numthreads(256, 1, 1)]
void CodeWordLengths(uint3 id : SV_DispatchThreadID)
{
    //init
    uint threadWorkOne = ceil(e_dictSize * 1.0f / s_numthreads);
    uint tempOne = id.x * threadWorkOne;
    for (uint i = tempOne; i < (tempOne + threadWorkOne); i++)
    {
        lNodesBuffer[i].freq = FreqBuffer[i];
        lNodesBuffer[i].leader = -1;
        iNodesBuffer[i].freq = 0xFFFFFFFF;
        iNodesBuffer[i].leader = 0xFFFFFFFF;
    }
    
    //for the guardian nodes
    if(id.x == 0)
    {
        setFront(0);
        setRear(0);
        setCur(0);
        setCurLeaveNum(e_dictSize - 1);
    }
    
    if (id.x == 0)
    {   
        //New Node
        uint mid[4] = { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF };
        if (getCur() <= e_dictSize - 1)
        {
            mid[0] = lNodesBuffer[getCur()].freq;
        }
        if (getCur() <= e_dictSize - 2)
        {
            mid[1] = lNodesBuffer[getCur() + 1].freq;
        }
        if (getRear() > getFront())
        {
            mid[2] = iNodesBuffer[getFront()].freq;
        }
        if (getRear() > getFront() + 1)
        {
            mid[3] = iNodesBuffer[getFront() + 1].freq;
        }
        bool isLeafA = true;
        bool isLeafB = true;
        if (mid[0] > mid[2])
        {
            mid[0] = mid[2];
            isLeafA = false;
        }
        if (mid[1] > mid[3])
        {
            mid[1] = mid[3];
            isLeafB = false;
        }
        if (mid[1] > mid[2])
        {
            mid[1] = mid[2];
            isLeafB = false;
        }
        setMinFreq(mid[0] + mid[1]);
        iNodesBuffer[getRear()].freq = getMinFreq();
        iNodesBuffer[getRear()].leader = -1;
        if (isLeafA)
        {
            lNodesBuffer[getCur()].leader = getRear();
            CLBuffer[getCur()]++;
            setCur(getCur() + 1);
        }
        else
        {
            iNodesBuffer[getFront()].leader = getRear();
            setFront(getFront());
        }
        if (isLeafB)
        {
            lNodesBuffer[getCur()].leader = getRear();
            CLBuffer[getCur()]++;
            setCur(getCur() + 1);
        }
        else
        {
            iNodesBuffer[getFront()].leader = getRear();
            setFront(getFront());
        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    //Select 
    
    for (uint j = tempOne + getCur(); j < (tempOne + threadWorkOne + getCur()) && j < e_dictSize; j++)
    {
        if (lNodesBuffer[j].freq <= getMinFreq())
        {
            copyBuffer[j - getCur()].freq = lNodesBuffer[j].freq;
            copyBuffer[j - getCur()].index = j;
            copyBuffer[j - getCur()].isLeaf = 1;
            
 
            if (j == e_dictSize - 1 || lNodesBuffer[j + 1].freq > getMinFreq())
            {
                InterlockedMin(flagBuffer[6], (j + 1) - getCur());
            }
        }
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    if(id.x == 0)
    {
        setMergeRear(getRear());
        setMergeFront(getFront());
        if ((getCurLeaveNum() + getRear() - getFront()) % 2 == 0)
        {
            setFront(getRear());
        }
        else
        {
            if (getRear() - getFront() != 0 && 
                FreqBuffer[getCur() + getCurLeaveNum()] <= iNodesBuffer[getRear()].freq)
            {
                setMergeRear(getMergeRear() - 1);
                setFront(getRear() - 1);
            }
            else
            {
                setFront(getRear());
                setCurLeaveNum(getCurLeaveNum() - 1);
            }
        }
        
        setCur(getCur() + getCurLeaveNum());
        setRear(getRear() + 1);
        
        //formality
        setTempLength(getCurLeaveNum());
    }
    
    DeviceMemoryBarrierWithGroupSync();
    
    //Merge go here
    
    DeviceMemoryBarrierWithGroupSync();
    uint threadWorkTwo = ceil(getTempLength() / s_numthreads);
    uint tempTwo = id.x * threadWorkTwo;
    
    for (uint k = tempTwo; k < tempTwo + threadWorkTwo; k++)
    {
        uint index = getRear() + k;
        //iNodesBuffer[index].freq = 

    }
    
    
}
