#pragma use_dxc
#pragma kernel Init
#pragma kernel DefaultHistogram
#pragma kernel GroupedHistogram
#pragma kernel ThreadReducedHistogram
#pragma kernel WaveIntrinsicPrefixSum
#pragma kernel ConventionalPrefixSum

#define WAVE_SIZE 16
#define GROUP_SIZE 32
#define THREAD_BLOCKS 64
#define MAX_GROUP 2048
//(n-w)(w-1) + 1
#define WAVES 17

#define RADIX_BITS 8
#define RADIX 256
#define MASK 255
#define MAX_KEY_BITS 16
#define MAX_KEY_VAL 65536


#define NUM_BANKS 16 
#define LOG_NUM_BANKS 4 

RWStructuredBuffer<uint> b_input;
RWStructuredBuffer<uint> b_output;
RWStructuredBuffer<uint> b_prefixes;
RWStructuredBuffer<uint> b_check;
RWStructuredBuffer<uint> b_globalHistogram;
RWStructuredBuffer<uint> b_tempHist;

extern float e_seed;
extern uint e_sortLength;


groupshared uint g_waveTotal[GROUP_SIZE / WAVE_SIZE];
groupshared uint g_hist[RADIX];
groupshared uint g_cHist[THREAD_BLOCKS];
groupshared uint g_tranHist[RADIX];
groupshared uint g_tranHistTwo[WAVES + 1];
groupshared uint counter;


uint randTwo(float n, float seed, uint limit)
{
    return uint(frac(sin(n + seed) * 43758.5453) * limit);
}

//extract most significant digit
uint ExtractDigit(uint _in, uint _pos)
{
    return (_in >> (RADIX_BITS * _pos)) & MASK;
}

uint ConflictOffset(uint _n)
{
    return ((_n) >> NUM_BANKS + (_n) >> (2 * LOG_NUM_BANKS));
}

[numthreads(GROUP_SIZE, 1, 1)]
void Init(int3 id : SV_DispatchThreadID)
{
    uint length;
    uint stride;
    b_input.GetDimensions(length, stride);
    uint threadWork = ceil(float(length) / (THREAD_BLOCKS * GROUP_SIZE));
    
    for (int i = id.x * threadWork; i < ((id.x + 1) * threadWork); i++)
    {
        b_input[i] = randTwo(i, e_seed, MAX_KEY_VAL);
    }
}

[numthreads(GROUP_SIZE, 1, 1)]
void DefaultHistogram(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID, int3 id : SV_DispatchThreadID)
{
    uint l_hist[RADIX] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0 };
    uint l_sortLength = e_sortLength;
    //int initialPosition = ceil(float(MAX_KEY_BITS) / RADIX_BITS) - 1;
    uint initialPosition = 0;
    int threadWork = ceil(l_sortLength / float(THREAD_BLOCKS * GROUP_SIZE));
    
    for (int i = id.x * threadWork; i < ((id.x + 1) * threadWork); i++)
    {
        g_hist[i] = 0;
        b_prefixes[i] = 0;
        b_globalHistogram[i] = 0;
    }
    GroupMemoryBarrierWithGroupSync();
    
    
    //Wave histogram
    //Test RLE histogram methods
    for (int j = id.x * threadWork; j < ((id.x + 1) * threadWork); j++)
    {
        l_hist[ExtractDigit(b_input[j], 1)]++;
    }
    
    for (int k = 0; k < RADIX; k++)
    {
        l_hist[k] = WaveActiveSum(l_hist[k]);
    }
    GroupMemoryBarrierWithGroupSync();
        
    if (WaveIsFirstLane())
    {
        //create an offset for every insertion point. Once the loop iterator is past the max value, subtract the max value to 
        //push value back to min value
        int insertWork = gid.x * (GROUP_SIZE / WAVE_SIZE) + (gtid.x / WAVE_SIZE);
        for (int a = insertWork; a < insertWork + RADIX; a++)
        {
            uint insertion = a < RADIX ? a : a - RADIX;
            InterlockedAdd(g_hist[insertion], l_hist[insertion]);
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    if(gtid.x == 0)
    {
        for (int b = gid.x; b < gid.x + RADIX; b++)
        {
            uint insertion = b < RADIX ? b : b - RADIX;
            InterlockedAdd(b_globalHistogram[insertion], g_hist[insertion]);
        }
    }
}

[numthreads(GROUP_SIZE, 1, 1)]
void GroupedHistogram(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID, int3 id : SV_DispatchThreadID)
{
    uint l_hist[RADIX] =
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 0, 0
    };
    uint l_sortLength = e_sortLength;
    //int initialPosition = ceil(float(MAX_KEY_BITS) / RADIX_BITS) - 1;
    uint initialPosition = 0;
    int threadWork = ceil(l_sortLength / float(THREAD_BLOCKS * GROUP_SIZE));
    
    for (int i = id.x * threadWork; i < ((id.x + 1) * threadWork); i++)
    {
        g_hist[i] = 0;
        b_prefixes[i] = 0;
        b_globalHistogram[i] = 0;
    }
    GroupMemoryBarrierWithGroupSync();
    
    //Wave histogram
    //Test RLE histogram methods
    for (int j = id.x * threadWork; j < ((id.x + 1) * threadWork); j++)
    {
        l_hist[ExtractDigit(b_input[j], 1)]++;
    }
    
    for (int k = 0; k < RADIX; k++)
    {
        l_hist[k] = WaveActiveSum(l_hist[k]);
    }
        
    if (WaveIsFirstLane())
    {
        //create an offset for every insertion point. Once the loop iterator is past the max value, subtract the max value to 
        //push value back to min value
        int insertWork = gid.x * (GROUP_SIZE / WAVE_SIZE) + (gtid.x / WAVE_SIZE);
        for (int a = insertWork; a < insertWork + RADIX; a++)
        {
            uint insertion = a < RADIX ? a : a - RADIX;
            InterlockedAdd(g_hist[insertion], l_hist[insertion]);
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    int offset = 1;
    for (int h = RADIX >> 1; h > 0; h >>= 1)
    {
        int localWork = ceil(h / float(GROUP_SIZE));
        for (int g = gtid.x * localWork; g < (gtid.x + 1) * localWork; g++)
        {
            GroupMemoryBarrierWithGroupSync();
            if (g < h)
            {
                int aI = offset * (2 * g + 1) - 1;
                int bI = offset * (2 * g + 2) - 1;
                g_hist[bI] += g_hist[aI];
            }
        }
        offset <<= 1;
    }
    
    if (gtid.x == 0)
    {
        g_hist[RADIX - 1] = 0;
    }
    
    for (int l = 1; l < RADIX; l <<= 1)
    {
        offset >>= 1;
        int localWork = ceil(l / float(GROUP_SIZE));
        for (int f = gtid.x * localWork; f < (gtid.x + 1) * localWork; f++)
        {
            GroupMemoryBarrierWithGroupSync();
            if (f < l)
            {
                int aI = offset * (2 * f + 1) - 1;
                int bI = offset * (2 * f + 2) - 1;
                int temp = g_hist[aI];
                g_hist[aI] = g_hist[bI];
                g_hist[bI] += temp;
            }
        }
    }
    GroupMemoryBarrierWithGroupSync();

    if (gtid.x == 0)
    {
        for (int b = gid.x; b < gid.x + RADIX; b++)
        {
            uint insertion = b < RADIX ? b : b - RADIX;
            InterlockedAdd(b_globalHistogram[insertion], g_hist[insertion]);
        }
    }
    
    for (int c = gtid.x; c < RADIX; c += GROUP_SIZE)
    {
        b_tempHist[c + gid.x * RADIX] = g_hist[c];
    }
}

[numthreads(GROUP_SIZE, 1, 1)]
void ThreadReducedHistogram(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID)
{
    uint l_sortLength = e_sortLength;
    uint l_hist[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    //int initialPosition = ceil(float(MAX_KEY_BITS) / RADIX_BITS) - 1;
    uint initialPosition = 0;
    int groupWork = ceil(l_sortLength / float(THREAD_BLOCKS));
    
    for (int i = gid.x * groupWork + gtid.x; i < (gid.x + 1) * groupWork; i += GROUP_SIZE)
    {
        if (i < RADIX)
        {
            g_hist[i] = 0;
            b_globalHistogram[i] = 0;
        }
        b_tempHist[i] = 0;
        b_prefixes[i] = 0;
    }
    GroupMemoryBarrierWithGroupSync();
    
    uint counter = 0;
    for (int k = gid.x * groupWork + gtid.x; k < (gid.x + 1) * groupWork; k += GROUP_SIZE)
    {
        if(k < l_sortLength)
        {
            l_hist[counter] = ExtractDigit(b_input[k], 1);
            b_prefixes[k] = l_hist[counter];
            counter++;
            
            //create runs of size 8 to combine additions of same digit to increase memory bandwith effeciency
            //hard code implementation of batcher oems of size eight
            if (counter == 8)
            {
                uint l = l_hist[0];
                uint r = l_hist[1];
                
                //first row
                if (r > l)
                {
                    l_hist[0] = r;
                    l_hist[1] = l;
                }
            
                l = l_hist[2];
                r = l_hist[3];
                if (r > l)
                {
                    l_hist[2] = r;
                    l_hist[3] = l;
                }
            
                l = l_hist[4];
                r = l_hist[5];
                if (r > l)
                {
                    l_hist[4] = r;
                    l_hist[5] = l;
                }
            
                l = l_hist[6];
                r = l_hist[7];
                if (r > l)
                {
                    l_hist[6] = r;
                    l_hist[7] = l;
                }
            
                //second row
                l = l_hist[0];
                r = l_hist[2];
                if (r > l)
                {
                    l_hist[0] = r;
                    l_hist[2] = l;
                }
            
                l = l_hist[4];
                r = l_hist[6];
                if (r > l)
                {
                    l_hist[4] = r;
                    l_hist[6] = l;
                }
            
                l = l_hist[1];
                r = l_hist[3];
                if (r > l)
                {
                    l_hist[1] = r;
                    l_hist[3] = l;
                }
            
                l = l_hist[5];
                r = l_hist[7];
                if (r > l)
                {
                    l_hist[5] = r;
                    l_hist[7] = l;
                }
            
                l = l_hist[1];
                r = l_hist[2];
                if (r > l)
                {
                    l_hist[1] = r;
                    l_hist[2] = l;
                }
            
                l = l_hist[5];
                r = l_hist[6];
                if (r > l)
                {
                    l_hist[5] = r;
                    l_hist[6] = l;
                }
            
                //thid row
                l = l_hist[0];
                r = l_hist[4];
                if (r > l)
                {
                    l_hist[0] = r;
                    l_hist[4] = l;
                }
            
                l = l_hist[1];
                r = l_hist[5];
                if (r > l)
                {
                    l_hist[1] = r;
                    l_hist[5] = l;
                }
            
                l = l_hist[2];
                r = l_hist[6];
                if (r > l)
                {
                    l_hist[2] = r;
                    l_hist[6] = l;
                }
            
                l = l_hist[3];
                r = l_hist[7];
                if (r > l)
                {
                    l_hist[3] = r;
                    l_hist[7] = l;
                }
            
                l = l_hist[2];
                r = l_hist[4];
                if (r > l)
                {
                    l_hist[2] = r;
                    l_hist[4] = l;
                }
            
                l = l_hist[3];
                r = l_hist[5];
                if (r > l)
                {
                    l_hist[3] = r;
                    l_hist[5] = l;
                }
            
                //last row
                l = l_hist[1];
                r = l_hist[2];
                if (r > l)
                {
                    l_hist[1] = r;
                    l_hist[2] = l;
                }
            
                l = l_hist[3];
                r = l_hist[4];
                if (r > l)
                {
                    l_hist[3] = r;
                    l_hist[4] = l;
                }
            
                l = l_hist[5];
                r = l_hist[6];
                if (r > l)
                {
                    l_hist[5] = r;
                    l_hist[6] = l;
                }
                
                int rle = 1;
                for (int j = 1; j < 8; j++)
                {
                    if (l_hist[j - 1] == l_hist[j])
                    {
                        rle++;
                    }
                    else
                    {
                        InterlockedAdd(g_hist[l_hist[j - 1]], rle);
                        rle = 1;
                    }
                }
                InterlockedAdd(g_hist[l_hist[7]], rle);
                counter = 0;
            }
        }
    }
    //ensure histogram has proper empty values for the final pass
    //probably a more elegant way to do this
    for(int z = counter; z < 8; z++)
    {
        l_hist[z] = 0;
    }
    
    //catch if there are remaining digits in the local histogram
    //sort will be done with insertion sort for simplicity
    if (counter > 0)
    {
        int iter = 1;
        while (iter < counter + 1)
        {
            int l = l_hist[iter];
            int r = iter - 1;
            while (r >= 0 && l_hist[r] < l)
            {
                l_hist[r + 1] = l_hist[r];
                r--;
            }
            l_hist[r + 1] = l;
            iter++;
        }
        
        int rle = 1;
        for (int h = 1; h < counter + 1; h++)
        {
            if (l_hist[h - 1] == 0)
            {
                InterlockedAdd(g_hist[0], 1);
            }
            else
            {
                if (l_hist[h - 1] == l_hist[h])
                {
                    rle++;
                }
                else
                {
                    InterlockedAdd(g_hist[l_hist[h - 1]], rle);
                    rle = 1;
                }
            }
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    //push group values to temporary histogram
    //temp histogram is of size THREAD_BLOCKS * RADIX
    //group digits together for later better memory access
    for(int a = gtid.x; a < RADIX; a += GROUP_SIZE)
    {
        b_tempHist[gid.x + (a * THREAD_BLOCKS)] = g_hist[a];
    }

    //push group values to the global histogram for total
    if (gtid.x == 0)
    {
        for (int b = gid.x; b < gid.x + RADIX; b++)
        {
            uint insertion = b < RADIX ? b : b - RADIX;
            InterlockedAdd(b_globalHistogram[insertion], g_hist[insertion]);
        }
    }
}

//speed almost identical
//Wave intrinsic
//number of waves needed is (n-w)/(w-1) + 1
[numthreads(WAVES * WAVE_SIZE, 1, 1)]
void WaveIntrinsicPrefixSum(int3 gtid : SV_GroupThreadID)
{
    g_tranHist[gtid.x] = b_globalHistogram[gtid.x];
    GroupMemoryBarrierWithGroupSync();
    
    //first pass
    int adjustment = gtid.x - floor(gtid.x / WAVE_SIZE);
    uint temp = WavePrefixSum(g_tranHist[adjustment]);
    
    if(gtid.x < WAVE_SIZE)
    {
        g_tranHist[gtid.x] = temp;
    }
    else
    {
        if (!WaveIsFirstLane())
        {
            g_tranHist[adjustment] = temp;
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    //second pass
    if(gtid.x < WAVE_SIZE)
    {
        g_tranHistTwo[gtid.x] = WavePrefixSum(g_tranHist[(gtid.x + 1) * (WAVE_SIZE - 1)]);
        
        temp = WavePrefixSum(g_tranHist[(gtid.x + WAVE_SIZE) * (WAVE_SIZE - 1)]);
        if (!WaveIsFirstLane())
        {
            g_tranHistTwo[gtid.x + (WAVE_SIZE - 1)] = temp + g_tranHistTwo[WAVE_SIZE - 1];
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    if (gtid.x > (WAVE_SIZE - 1))
    {
        b_globalHistogram[gtid.x] = g_tranHist[gtid.x] + g_tranHistTwo[floor((gtid.x - 1) / float(WAVE_SIZE - 1))];
    }
}

//seemingly no speedup from conflict offset adjustment
//speed almost identical
//up sweep + down sweep no wave intrinsics
[numthreads(RADIX, 1, 1)]
void ConventionalPrefixSum(int3 gtid : SV_GroupThreadID)
{
    int aI = gtid.x;
    int bI = gtid.x + (RADIX >> 1);
    int bankOffsetA = ConflictOffset(aI);
    int bankOffsetB = ConflictOffset(bI);
    g_tranHist[aI + bankOffsetA] = b_globalHistogram[aI];
    g_tranHist[bI + bankOffsetB] = b_globalHistogram[bI];
    
    int offset = 1;
    for (int i = RADIX >> 1; i > 0; i >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (gtid.x < i)
        {
            aI = offset * (2 * gtid.x + 1) - 1;
            aI += ConflictOffset(aI);
            bI = offset * (2 * gtid.x + 2) - 1;
            bI += ConflictOffset(bI);
            g_tranHist[bI] += g_tranHist[aI];
        }
        
        offset <<= 1;
    }
    
    if(gtid.x == 0)
    {
        g_tranHist[RADIX - 1 + ConflictOffset(RADIX - 1)] = 0;
    }
    
    for (int l = 1; l < RADIX; l <<= 1)
    {
        offset >>= 1;
        GroupMemoryBarrierWithGroupSync();
        if (gtid.x < l)
        {
            aI = offset * (2 * gtid.x + 1) - 1;
            aI += ConflictOffset(aI);
            bI = offset * (2 * gtid.x + 2) - 1;
            bI += ConflictOffset(bI);
            int temp = g_tranHist[aI];
            g_tranHist[aI] = g_tranHist[bI];
            g_tranHist[bI] += temp;
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    b_globalHistogram[aI] = g_tranHist[aI + bankOffsetA];
    b_globalHistogram[bI] = g_tranHist[bI + bankOffsetB];
}

[numthreads(GROUP_SIZE, 1, 1)]
void ComponentWisePrefix(int3 gtid : SV_GroupThreadID, int3 gid : SV_GroupID)
{
    //pull values from temporary global buffer
    for (int i = gtid.x; i < THREAD_BLOCKS; i += GROUP_SIZE)
    {
        g_cHist[i] = b_tempHist[(gid.x * THREAD_BLOCKS) + i];
    }
    GroupMemoryBarrierWithGroupSync();
    
    int offset = 1;
    for (int j = THREAD_BLOCKS >> 1; j > 0; j >>= 1)
    {
        int localWork = ceil(j / float(GROUP_SIZE));
        for (int k = gtid.x * localWork; k < (gtid.x + 1) * localWork; k++)
        {
            GroupMemoryBarrierWithGroupSync();
            if (k < j)
            {
                int aI = offset * (2 * k + 1) - 1;
                int bI = offset * (2 * k + 2) - 1;
                g_hist[bI] += g_hist[aI];
            }
        }
        offset <<= 1;
    }
    
    if (gtid.x == 0)
    {
        g_hist[THREAD_BLOCKS - 1] = 0;
    }
    
    for (int g = 1; g < THREAD_BLOCKS; g <<= 1)
    {
        offset >>= 1;
        int localWork = ceil(g / float(GROUP_SIZE));
        for (int h = gtid.x * localWork; h < (gtid.x + 1) * localWork; h++)
        {
            GroupMemoryBarrierWithGroupSync();
            if (h < g)
            {
                int aI = offset * (2 * h + 1) - 1;
                int bI = offset * (2 * h + 2) - 1;
                int temp = g_hist[aI];
                g_hist[aI] = g_hist[bI];
                g_hist[bI] += temp;
            }
        }
    }
    GroupMemoryBarrierWithGroupSync();

}

[numthreads(GROUP_SIZE, 1, 1)]
void ScatterKeys(int3 id : SV_DispatchThreadID, int3 gtid : SV_GroupThreadID)
{
    
}